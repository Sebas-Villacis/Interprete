
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.tesis.util;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import java.lang.StringBuilder;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\004\000\002\004\006\000\002\004\005\000\002" +
    "\004\006\000\002\004\006\000\002\005\005\000\002\005" +
    "\003\000\002\005\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\006\000\002\006\006\000\002\006\005\000\002" +
    "\007\005\000\002\007\003\000\002\007\005\000\002\007" +
    "\003\000\002\007\005\000\002\007\003\000\002\010\004" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\006\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\015\004\001\002\000\020\014\017\016" +
    "\ufffe\017\ufffe\020\ufffe\021\022\023\016\024\ufffe\001\002" +
    "\000\012\016\011\017\013\020\010\024\012\001\002\000" +
    "\004\002\007\001\002\000\004\002\001\001\002\000\010" +
    "\014\017\021\022\023\016\001\002\000\010\014\017\021" +
    "\030\023\016\001\002\000\010\014\017\021\030\023\016" +
    "\001\002\000\012\007\015\014\017\021\022\023\016\001" +
    "\002\000\004\002\000\001\002\000\010\014\044\021\046" +
    "\023\043\001\002\000\014\002\uffef\017\uffef\021\uffef\022" +
    "\uffef\024\uffef\001\002\000\014\002\uffee\017\uffee\021\uffee" +
    "\022\uffee\024\uffee\001\002\000\004\022\041\001\002\000" +
    "\014\002\ufffd\016\011\017\013\020\010\024\012\001\002" +
    "\000\024\002\ufff2\011\023\012\025\013\024\016\ufff2\017" +
    "\ufff2\020\ufff2\022\ufff0\024\ufff2\001\002\000\010\014\017" +
    "\021\037\023\016\001\002\000\012\011\035\014\017\021" +
    "\030\023\016\001\002\000\012\011\027\014\017\021\030" +
    "\023\016\001\002\000\014\002\uffed\017\uffed\021\uffed\022" +
    "\uffed\024\uffed\001\002\000\010\014\017\021\030\023\016" +
    "\001\002\000\022\002\ufff0\011\031\012\025\013\024\017" +
    "\ufff0\021\ufff0\022\ufff0\024\ufff0\001\002\000\010\014\017" +
    "\021\030\023\016\001\002\000\014\002\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\024\uffe9\001\002\000\014\002\uffeb\017\uffeb" +
    "\021\uffeb\022\uffeb\024\uffeb\001\002\000\014\002\uffec\017" +
    "\uffec\021\uffec\022\uffec\024\uffec\001\002\000\010\014\017" +
    "\021\030\023\016\001\002\000\014\002\uffea\017\uffea\021" +
    "\uffea\022\uffea\024\uffea\001\002\000\024\002\ufff1\011\031" +
    "\012\025\013\024\016\ufff1\017\ufff1\020\ufff1\022\ufff0\024" +
    "\ufff1\001\002\000\004\002\ufffb\001\002\000\010\014\017" +
    "\021\022\023\016\001\002\000\014\002\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\024\ufff3\001\002\000\010\002\uffe3\010\uffe3" +
    "\022\054\001\002\000\010\002\uffe5\010\uffe5\022\052\001" +
    "\002\000\004\010\051\001\002\000\010\002\uffe7\010\uffe7" +
    "\022\047\001\002\000\010\014\044\021\046\023\043\001" +
    "\002\000\006\002\uffe8\010\uffe8\001\002\000\004\002\ufff7" +
    "\001\002\000\010\014\044\021\046\023\043\001\002\000" +
    "\006\002\uffe6\010\uffe6\001\002\000\010\014\044\021\046" +
    "\023\043\001\002\000\006\002\uffe4\010\uffe4\001\002\000" +
    "\004\002\ufff8\001\002\000\014\002\ufff9\017\063\021\064" +
    "\022\062\024\061\001\002\000\004\002\ufff6\001\002\000" +
    "\010\014\017\021\022\023\016\001\002\000\006\021\064" +
    "\022\062\001\002\000\010\014\044\021\046\023\043\001" +
    "\002\000\010\011\065\012\067\013\066\001\002\000\006" +
    "\014\076\021\077\001\002\000\006\011\074\014\073\001" +
    "\002\000\006\011\071\014\070\001\002\000\004\002\uffdf" +
    "\001\002\000\004\014\072\001\002\000\004\002\uffdd\001" +
    "\002\000\004\002\uffde\001\002\000\004\014\075\001\002" +
    "\000\004\002\uffdc\001\002\000\004\002\uffe0\001\002\000" +
    "\004\002\uffe1\001\002\000\004\002\ufff5\001\002\000\004" +
    "\002\uffe2\001\002\000\004\002\ufff4\001\002\000\014\002" +
    "\ufffc\016\011\017\013\020\010\024\012\001\002\000\004" +
    "\002\ufffa\001\002\000\012\016\uffff\017\uffff\020\uffff\024" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\005\003\004\001\001\000\006\005" +
    "\104\006\017\001\001\000\004\004\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\102\006\017\001" +
    "\001\000\004\006\056\001\001\000\004\006\055\001\001" +
    "\000\006\005\020\006\017\001\001\000\002\001\001\000" +
    "\004\007\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\037\001\001\000\002\001" +
    "\001\000\004\006\031\001\001\000\004\006\033\001\001" +
    "\000\004\006\025\001\001\000\002\001\001\000\004\006" +
    "\032\001\001\000\002\001\001\000\004\006\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\041\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\052\001\001" +
    "\000\002\001\001\000\004\007\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\057\001\001\000\002" +
    "\001\001\000\006\005\101\006\017\001\001\000\004\010" +
    "\100\001\001\000\004\007\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\103\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();

    public static HashMap<String, String> TablaSQL  = new HashMap<String, String>() {{
//Palabras mostradas con Select
	put("buscar", "SELECT ");
	put("visualizar", "SELECT ");
	put("ver", "SELECT ");
	put("hallar", "SELECT ");
	put("seleccionar", "SELECT ");	
	put("mostrar", "SELECT ");
	put("indicar", "SELECT ");
	put("seÃ±alar", "SELECT ");
	put("enseÃ±ar", "SELECT ");
	put("visibilizar", "SELECT ");
	
	//Palabras mostradas con Update
    put("actualizar", "UPDATE ");
	put("reemplazar", "UPDATE ");
	put("modificar", "UPDATE ");
	
	//Palabras mostradas con Delete
    put("eliminar", "DELETE ");
	put("descartar", "DELETE ");
    put("excluir", "DELETE ");
	put("suprimir", "DELETE ");
	put("quitar", "DELETE ");
	
	// Palabras mostradas con Insert 
    put("insertar", "INSERT INTO ");
	put("introducir", "INSERT INTO ");
	put("incluir", "INSERT INTO ");
	put("agregar", "INSERT INTO ");
	
    put("donde", " WHERE ");
	put("cual", " WHERE ");
    put("en", "FROM ");
    put("de", "FROM ");
    put("con", "SET ");
    put("y", " AND ");
	put("e", "AND ");
    put("o", "OR ");
	put("u", "OR ");
    put("los", "* FROM ");
	put("las", "* FROM ");
	put("unos", "* FROM ");
	put("unas", "* FROM ");
        put("datos", "VALUES");
        put("entre", " BETWEEN ");
        put("ordenado", " ORDER BY ");


    put(",", ",");
}};
  
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"","");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        
     
    }
    public static String quote(String s) {
               if(s.substring(0,1).equals('\'')){
        return s;
        }else{ 
        return new StringBuilder()
            .append('\'')
            .append(s)
            .append('\'')
            .toString();
        }
    }
     public String printErrors(){
         StringBuilder str  = new StringBuilder();
        for(TError item : TablaES ){
        str.append("Lexema: "+item.lexema+"\n"+
                  "\tFila: "+item.linea+"\n"+
                  "\tColumna: "+item.columna+"\n\n"); 
        
        }
       return str.toString();
    
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= VP NP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 resultado=a+" "+c; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VP ::= verbo R 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT=TablaSQL.get(a.toLowerCase())+r;
                        
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VP",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VP ::= verbo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		  if(RESULT==null){
                         RESULT=TablaSQL.get(a.toLowerCase());
                                }else{
                                RESULT+=TablaSQL.get(a.toLowerCase());
}
                            
                        
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VP",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NP ::= preposicion R 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                     RESULT=TablaSQL.get(pr.toLowerCase())+r;
                                                         
                                       }
                                      else{ 
                                        RESULT+=TablaSQL.get(pr.toLowerCase())+r;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NP ::= proposicion R 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      RESULT=TablaSQL.get(pr.toLowerCase())+r;
                                                          
                                       }
                                      else{ RESULT+=TablaSQL.get(pr.toLowerCase())+r;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NP ::= preposicion R NP 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String np = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                        RESULT=TablaSQL.get(pr.toLowerCase())+r+np;
                                                           
                                       }
                                      else{ RESULT+=TablaSQL.get(pr.toLowerCase())+r+np;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NP ::= proposicion R NP 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String np = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                        RESULT=TablaSQL.get(pr.toLowerCase())+r+np;
                                                           
                                       }
                                      else{ RESULT+=TablaSQL.get(pr.toLowerCase())+r+np;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NP ::= adverbio I 
            {
              String RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String ad = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      RESULT=TablaSQL.get(ad.toLowerCase())+i;
                                                        
                                       }
                                      else{ RESULT+=TablaSQL.get(ad.toLowerCase())+i;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NP ::= adjetivo I 
            {
              String RESULT =null;
		int adjleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int adjright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String adj = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      RESULT=TablaSQL.get(adj.toLowerCase())+i;
                                                        
                                       }
                                      else{ RESULT+=TablaSQL.get(adj.toLowerCase())+i;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NP ::= preposicion para Z parc 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      RESULT=TablaSQL.get(pr.toLowerCase())+pa+z+pc;
                                                        
                                       }
                                      else{ RESULT+=TablaSQL.get(pr.toLowerCase())+pa+z+pc;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NP ::= adverbio I W 
            {
              String RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String ad = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      RESULT=TablaSQL.get(ad.toLowerCase())+i+ " "+ w;
                                                        
                                       }
                                      else{ RESULT+=TablaSQL.get(ad.toLowerCase())+i+ " "+ w;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NP ::= adverbio I preposicion Z 
            {
              String RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String ad = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      RESULT=TablaSQL.get(ad.toLowerCase())+i+ " "+TablaSQL.get(pr.toLowerCase())+" "+z;
                                                        
                                       }
                                      else{ RESULT+=TablaSQL.get(ad.toLowerCase())+i+ " "+TablaSQL.get(pr.toLowerCase())+" "+z;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NP ::= adverbio I adjetivo R 
            {
              String RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String ad = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int adjleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int adjright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String adj = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                             RESULT=TablaSQL.get(ad.toLowerCase())+i+ " "+TablaSQL.get(adj.toLowerCase())+" "+r;

                                              }
                                             else{ RESULT+=TablaSQL.get(ad.toLowerCase())+i+ " "+TablaSQL.get(adj.toLowerCase())+" "+r;
                                                } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NP",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // R ::= I conjuncion R 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=i+TablaSQL.get(co.toLowerCase())+r;
                                                           
                                       }
                                      else{ RESULT+=i+TablaSQL.get(co.toLowerCase())+r;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("R",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // R ::= sustantivo 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){RESULT=s;
                                }else{RESULT+=s;} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("R",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // R ::= sustantivo igual sustantivo 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=s+ig+" "+quote(su);
                                                           
                                       }
                                      else{ RESULT+=s+ig+" "+quote(su);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("R",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // I ::= sustantivo 
            {
              String RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){RESULT=su;}
     
                         else{RESULT+=su;} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // I ::= fecha 
            {
              String RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		if(RESULT==null){RESULT=fe;}
     
                         else{RESULT+=fe;} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // I ::= num 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){RESULT=n;}
                         else{RESULT+=n;} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // I ::= sustantivo mayor I 
            {
              String RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int myleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int myright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object my = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){RESULT=su+" "+my+" "+i;}
                         else{RESULT+=su+" "+my+" "+i;} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // I ::= sustantivo menor I 
            {
              String RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){RESULT=su+" "+mn+" "+i;}
                         else{RESULT+=su+" "+mn+" "+i;} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // I ::= sustantivo mayor igual I 
            {
              String RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int myleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int myright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object my = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){RESULT=su+" "+my+ig+" "+i;}
                         else{RESULT+=su+" "+my+ig+" "+i;} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // I ::= sustantivo menor igual I 
            {
              String RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){RESULT=su+" "+mn+ig+" "+i;}
                         else{RESULT+=su+" "+mn+ig+" "+i;} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // I ::= sustantivo igual I 
            {
              String RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){RESULT=su+" "+ig+" "+quote(i);}
                         else{RESULT+=su+" "+ig+" "+quote(i);} 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Z ::= sustantivo conjuncion Z 
            {
              String RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=quote(su)+TablaSQL.get(co.toLowerCase())+z;
                                                           
                                       }
                                      else{ RESULT+=quote(su)+TablaSQL.get(co.toLowerCase())+z;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Z",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Z ::= sustantivo 
            {
              String RESULT =null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=quote(su);
                                                           
                                       }
                                      else{ RESULT+=quote(su);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Z",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Z ::= num conjuncion Z 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=n+TablaSQL.get(co.toLowerCase())+z;
                                                           
                                       }
                                      else{ RESULT+=n+TablaSQL.get(co.toLowerCase())+z;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Z",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Z ::= num 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=n;
                                                           
                                       }
                                      else{ RESULT+=n;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Z",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Z ::= fecha conjuncion Z 
            {
              String RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=quote(fe)+TablaSQL.get(co.toLowerCase())+z;
                                                           
                                       }
                                      else{ RESULT+=quote(fe)+TablaSQL.get(co.toLowerCase())+z;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Z",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Z ::= fecha 
            {
              String RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String fe = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=quote(fe);
                                                           
                                       }
                                      else{ RESULT+=quote(fe);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Z",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // W ::= conjuncion W 
            {
              String RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT= " "+TablaSQL.get(co.toLowerCase())+w;
                                                            
                                       }
                                      else{ RESULT+= " "+ TablaSQL.get(co.toLowerCase())+w;
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("W",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // W ::= sustantivo igual sustantivo 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String su = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=s+ig+" "+quote(su);
                                                           
                                       }
                                      else{ RESULT+=s+ig+" "+quote(su);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("W",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // W ::= sustantivo igual num 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=s+ig+" "+quote(nu);
                                                           
                                       }
                                      else{ RESULT+=s+ig+" "+quote(nu);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("W",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // W ::= sustantivo mayor num 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=s+" "+ma+" "+quote(nu);
                                                           
                                       }
                                      else{ RESULT+=s+" "+ma+" "+quote(nu);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("W",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // W ::= sustantivo menor num 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=s+" "+me+" "+quote(nu);
                                                           
                                       }
                                      else{ RESULT+=s+" "+me+" "+quote(nu);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("W",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // W ::= sustantivo mayor igual num 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=s+" "+ma+ig+" "+quote(nu);
                                                           
                                       }
                                      else{ RESULT+=s+" "+ma+ig+" "+quote(nu);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("W",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // W ::= sustantivo menor igual num 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int igleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int igright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 if(RESULT==null){
                                      
                                        RESULT=s+" "+me+ig+" "+quote(nu);
                                                           
                                       }
                                      else{ RESULT+=s+" "+me+ig+" "+quote(nu);
                                         } 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("W",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
